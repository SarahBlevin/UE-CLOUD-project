services:
  vote:
    image: europe-west9-docker.pkg.dev/tuto-kube/voting-image/vote
    build:
      context: ./vote
      dockerfile: ./Dockerfile
    networks:
      - front-tier
      - back-tier
    depends_on:
      - redis
    environment:
      - FLASK_RUN_HOST=0.0.0.0 #to make flask app listen outside container
      - PORT=5000

  vote2:
    image: europe-west9-docker.pkg.dev/tuto-kube/voting-image/vote2
    build:
      context: ./vote
      dockerfile: ./Dockerfile
    networks:
      - front-tier
      - back-tier
    depends_on:
      - redis
    environment:
      - FLASK_RUN_HOST=0.0.0.0
      - PORT=5001

  result:
    image: europe-west9-docker.pkg.dev/tuto-kube/voting-image/result
    build:
      context: ./result
      dockerfile: ./Dockerfile
    networks:
      - front-tier
      - back-tier
    depends_on:
      - db
    environment:
      - PORT=4000
    ports:
      - "4000:4000"

  seed:
    image: europe-west9-docker.pkg.dev/tuto-kube/voting-image/seed
    build:
      context: ./seed-data
      dockerfile: ./Dockerfile
    networks:
      - front-tier
    depends_on:
      - vote
      - nginx

  worker:
    image: europe-west9-docker.pkg.dev/tuto-kube/voting-image/worker
    build:
      context: ./worker
      dockerfile: ./Dockerfile
      args:
        TARGETPLATFORM: linux/amd64
        TARGETARCH: amd64
        BUILDPLATFORM: linux/amd64
    networks:
      - back-tier
    depends_on:
      - redis
      - db

  redis:
    image: europe-west9-docker.pkg.dev/tuto-kube/voting-image/redis
    build:
      context: .
      dockerfile: ./Dockerfile.redis
    networks:
      - back-tier
    volumes:
      - redis-data:/data
      - ./healthchecks:/healthchecks #service specific
    healthcheck:
      test: ["CMD", "/healthchecks/redis.sh"]
      interval: 30s
      retries: 3

  db:
    image: europe-west9-docker.pkg.dev/tuto-kube/voting-image/db
    build:
      context: .
      dockerfile: ./Dockerfile.postgres
    networks:
      - back-tier
    volumes:
      - db-data:/var/lib/postgresql/data
      - ./healthchecks:/healthchecks
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    healthcheck:
      test: ["CMD", "/healthchecks/postgres.sh"]
      interval: 10s
      retries: 5

  nginx:
    image: europe-west9-docker.pkg.dev/tuto-kube/voting-image/nginx
    build:
      context: ./nginx
      dockerfile: ./Dockerfile
    networks:
      - front-tier
    depends_on:
      - vote
      #- result
    ports:
      - "80:80"

networks:
  front-tier:
    driver: bridge #default docker network driver: creates an isolated network
  back-tier:
    driver: bridge

volumes: #named volumes
  redis-data:
  db-data:
